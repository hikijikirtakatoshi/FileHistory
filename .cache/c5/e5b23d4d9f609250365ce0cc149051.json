{"id":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","dependencies":[{"name":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/package.json","includedInParent":true,"mtime":1560244257178},{"name":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/package.json","includedInParent":true,"mtime":1560416584037},{"name":"web3-utils","loc":{"line":2,"column":92},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-utils/dist/web3-utils.umd.js"},{"name":"web3-core-helpers","loc":{"line":2,"column":115},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-core-helpers/dist/web3-core-helpers.umd.js"},{"name":"@babel/runtime/helpers/classCallCheck","loc":{"line":2,"column":145},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/classCallCheck.js"},{"name":"@babel/runtime/helpers/possibleConstructorReturn","loc":{"line":2,"column":195},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"},{"name":"@babel/runtime/helpers/getPrototypeOf","loc":{"line":2,"column":256},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/getPrototypeOf.js"},{"name":"@babel/runtime/helpers/inherits","loc":{"line":2,"column":306},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/inherits.js"},{"name":"web3-core-method","loc":{"line":2,"column":350},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-core-method/dist/web3-core-method.umd.js"},{"name":"@babel/runtime/regenerator","loc":{"line":2,"column":379},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/regenerator/index.js"},{"name":"@babel/runtime/helpers/asyncToGenerator","loc":{"line":2,"column":418},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/asyncToGenerator.js"},{"name":"@babel/runtime/helpers/createClass","loc":{"line":2,"column":470},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/createClass.js"},{"name":"@babel/runtime/helpers/assertThisInitialized","loc":{"line":2,"column":517},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/@babel/runtime/helpers/assertThisInitialized.js"},{"name":"lodash/isFunction","loc":{"line":2,"column":574},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/lodash/isFunction.js"},{"name":"lodash/isObject","loc":{"line":2,"column":604},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/lodash/isObject.js"},{"name":"eth-lib/lib/hash","loc":{"line":2,"column":632},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/eth-lib/lib/hash.js"},{"name":"eth-lib/lib/rlp","loc":{"line":2,"column":661},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/eth-lib/lib/rlp.js"},{"name":"eth-lib/lib/bytes","loc":{"line":2,"column":689},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/eth-lib/lib/bytes.js"},{"name":"eth-lib/lib/account","loc":{"line":2,"column":719},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/eth-lib/lib/account.js"},{"name":"web3-core","loc":{"line":2,"column":751},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-core/dist/web3-core.umd.js"},{"name":"scrypt.js","loc":{"line":2,"column":773},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/scrypt.js/js.js"},{"name":"lodash/isString","loc":{"line":2,"column":795},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/lodash/isString.js"},{"name":"uuid","loc":{"line":2,"column":823},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/uuid/index.js"},{"name":"randombytes","loc":{"line":2,"column":840},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/randombytes/browser.js"},{"name":"pbkdf2","loc":{"line":2,"column":864},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/pbkdf2/browser.js"},{"name":"browserify-cipher","loc":{"line":2,"column":883},"parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/browserify-cipher/browser.js"},{"name":"buffer","parent":"/Users/hikishiritakatoshi/CryptoEconomics/Ethereum/Contract/filehistory/node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var define;\nvar global = arguments[3];\nvar Buffer = require(\"buffer\").Buffer;\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('web3-utils'), require('web3-core-helpers'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('web3-core-method'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('@babel/runtime/helpers/createClass'), require('@babel/runtime/helpers/assertThisInitialized'), require('lodash/isFunction'), require('lodash/isObject'), require('eth-lib/lib/hash'), require('eth-lib/lib/rlp'), require('eth-lib/lib/bytes'), require('eth-lib/lib/account'), require('web3-core'), require('scrypt.js'), require('lodash/isString'), require('uuid'), require('randombytes'), require('pbkdf2'), require('browserify-cipher')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'web3-utils', 'web3-core-helpers', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'web3-core-method', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', '@babel/runtime/helpers/createClass', '@babel/runtime/helpers/assertThisInitialized', 'lodash/isFunction', 'lodash/isObject', 'eth-lib/lib/hash', 'eth-lib/lib/rlp', 'eth-lib/lib/bytes', 'eth-lib/lib/account', 'web3-core', 'scrypt.js', 'lodash/isString', 'uuid', 'randombytes', 'pbkdf2', 'browserify-cipher'], factory) :\n    (global = global || self, factory(global.Web3EthAccounts = {}, global.Utils, global.web3CoreHelpers, global._classCallCheck, global._possibleConstructorReturn, global._getPrototypeOf, global._inherits, global.web3CoreMethod, global._regeneratorRuntime, global._asyncToGenerator, global._createClass, global._assertThisInitialized, global.isFunction, global.isObject, global.Hash, global.RLP, global.Bytes, global.EthLibAccount, global.web3Core, global.scryptsy, global.isString, global.uuid, global.randomBytes, global.pbkdf2, global.browserifyCipher));\n}(this, function (exports, Utils, web3CoreHelpers, _classCallCheck, _possibleConstructorReturn, _getPrototypeOf, _inherits, web3CoreMethod, _regeneratorRuntime, _asyncToGenerator, _createClass, _assertThisInitialized, isFunction, isObject, Hash, RLP, Bytes, EthLibAccount, web3Core, scryptsy, isString, uuid, randomBytes, pbkdf2, browserifyCipher) { 'use strict';\n\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _possibleConstructorReturn = _possibleConstructorReturn && _possibleConstructorReturn.hasOwnProperty('default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;\n    _getPrototypeOf = _getPrototypeOf && _getPrototypeOf.hasOwnProperty('default') ? _getPrototypeOf['default'] : _getPrototypeOf;\n    _inherits = _inherits && _inherits.hasOwnProperty('default') ? _inherits['default'] : _inherits;\n    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;\n    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n    _assertThisInitialized = _assertThisInitialized && _assertThisInitialized.hasOwnProperty('default') ? _assertThisInitialized['default'] : _assertThisInitialized;\n    isFunction = isFunction && isFunction.hasOwnProperty('default') ? isFunction['default'] : isFunction;\n    isObject = isObject && isObject.hasOwnProperty('default') ? isObject['default'] : isObject;\n    Hash = Hash && Hash.hasOwnProperty('default') ? Hash['default'] : Hash;\n    RLP = RLP && RLP.hasOwnProperty('default') ? RLP['default'] : RLP;\n    Bytes = Bytes && Bytes.hasOwnProperty('default') ? Bytes['default'] : Bytes;\n    scryptsy = scryptsy && scryptsy.hasOwnProperty('default') ? scryptsy['default'] : scryptsy;\n    isString = isString && isString.hasOwnProperty('default') ? isString['default'] : isString;\n    uuid = uuid && uuid.hasOwnProperty('default') ? uuid['default'] : uuid;\n    randomBytes = randomBytes && randomBytes.hasOwnProperty('default') ? randomBytes['default'] : randomBytes;\n\n    var MethodFactory =\n    function (_AbstractMethodFactor) {\n      _inherits(MethodFactory, _AbstractMethodFactor);\n      function MethodFactory(utils, formatters) {\n        var _this;\n        _classCallCheck(this, MethodFactory);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(MethodFactory).call(this, utils, formatters));\n        _this.methods = {\n          getChainId: web3CoreMethod.ChainIdMethod,\n          getGasPrice: web3CoreMethod.GetGasPriceMethod,\n          getTransactionCount: web3CoreMethod.GetTransactionCountMethod\n        };\n        return _this;\n      }\n      return MethodFactory;\n    }(web3CoreMethod.AbstractMethodFactory);\n\n    var Account =\n    function () {\n      function Account(options) {\n        var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, Account);\n        this.address = options.address;\n        this.privateKey = options.privateKey;\n        this.accounts = accounts;\n      }\n      _createClass(Account, [{\n        key: \"signTransaction\",\n        value: function signTransaction(tx, callback) {\n          return this.accounts.signTransaction(tx, this.privateKey, callback);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(data) {\n          if (Utils.isHexStrict(data)) {\n            data = Utils.hexToBytes(data);\n          }\n          var messageBuffer = Buffer.from(data);\n          var preamble = \"\\x19Ethereum Signed Message:\\n\".concat(data.length);\n          var preambleBuffer = Buffer.from(preamble);\n          var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n          var hash = Hash.keccak256s(ethMessage);\n          var signature = EthLibAccount.sign(hash, this.privateKey);\n          var vrs = EthLibAccount.decodeSignature(signature);\n          return {\n            message: data,\n            messageHash: hash,\n            v: vrs[0],\n            r: vrs[1],\n            s: vrs[2],\n            signature: signature\n          };\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(password, options) {\n          return Account.fromPrivateKey(this.privateKey, this.accounts).toV3Keystore(password, options);\n        }\n      }, {\n        key: \"toV3Keystore\",\n        value: function toV3Keystore(password, options) {\n          options = options || {};\n          var salt = options.salt || randomBytes(32);\n          var iv = options.iv || randomBytes(16);\n          var derivedKey;\n          var kdf = options.kdf || 'scrypt';\n          var kdfparams = {\n            dklen: options.dklen || 32,\n            salt: salt.toString('hex')\n          };\n          if (kdf === 'pbkdf2') {\n            kdfparams.c = options.c || 262144;\n            kdfparams.prf = 'hmac-sha256';\n            derivedKey = pbkdf2.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n          } else if (kdf === 'scrypt') {\n            kdfparams.n = options.n || 8192;\n            kdfparams.r = options.r || 8;\n            kdfparams.p = options.p || 1;\n            derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n          } else {\n            throw new Error('Unsupported kdf');\n          }\n          var cipher = browserifyCipher.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n          if (!cipher) {\n            throw new Error('Unsupported cipher');\n          }\n          var ciphertext = Buffer.concat([cipher.update(Buffer.from(this.privateKey.replace('0x', ''), 'hex')), cipher.final()]);\n          var mac = Utils.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')])).replace('0x', '');\n          return {\n            version: 3,\n            id: uuid.v4({\n              random: options.uuid || randomBytes(16)\n            }),\n            address: this.address.toLowerCase().replace('0x', ''),\n            crypto: {\n              ciphertext: ciphertext.toString('hex'),\n              cipherparams: {\n                iv: iv.toString('hex')\n              },\n              cipher: options.cipher || 'aes-128-ctr',\n              kdf: kdf,\n              kdfparams: kdfparams,\n              mac: mac.toString('hex')\n            }\n          };\n        }\n      }], [{\n        key: \"from\",\n        value: function from(entropy) {\n          var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return new Account(EthLibAccount.create(entropy || Utils.randomHex(32)), accounts);\n        }\n      }, {\n        key: \"fromPrivateKey\",\n        value: function fromPrivateKey(privateKey) {\n          var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return new Account(EthLibAccount.fromPrivate(privateKey), accounts);\n        }\n      }, {\n        key: \"fromV3Keystore\",\n        value: function fromV3Keystore(v3Keystore, password) {\n          var nonStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var accounts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n          if (!isString(password)) {\n            throw new Error('No password given.');\n          }\n          var json = isObject(v3Keystore) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n          if (json.version !== 3) {\n            throw new Error('Not a valid V3 wallet');\n          }\n          var derivedKey;\n          var kdfparams;\n          if (json.crypto.kdf === 'scrypt') {\n            kdfparams = json.crypto.kdfparams;\n            derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n          } else if (json.crypto.kdf === 'pbkdf2') {\n            kdfparams = json.crypto.kdfparams;\n            if (kdfparams.prf !== 'hmac-sha256') {\n              throw new Error('Unsupported parameters to PBKDF2');\n            }\n            derivedKey = pbkdf2.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n          } else {\n            throw new Error('Unsupported key derivation scheme');\n          }\n          var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n          var mac = Utils.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');\n          if (mac !== json.crypto.mac) {\n            throw new Error('Key derivation failed - possibly wrong password');\n          }\n          var decipher = browserifyCipher.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n          var seed = \"0x\".concat(Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString('hex'));\n          return Account.fromPrivateKey(seed, accounts);\n        }\n      }]);\n      return Account;\n    }();\n\n    var Wallet =\n    function () {\n      function Wallet(utils, accountsModule) {\n        _classCallCheck(this, Wallet);\n        this.utils = utils;\n        this.accountsModule = accountsModule;\n        this.defaultKeyName = 'web3js_wallet';\n        this.accounts = {};\n        this.accountsIndex = 0;\n        return new Proxy(this, {\n          get: function get(target, name) {\n            if (target.accounts[name]) {\n              return target.accounts[name];\n            }\n            if (name === 'length') {\n              return target.accountsIndex;\n            }\n            return target[name];\n          }\n        });\n      }\n      _createClass(Wallet, [{\n        key: \"create\",\n        value: function create(numberOfAccounts, entropy) {\n          for (var i = 0; i < numberOfAccounts; ++i) {\n            this.add(Account.from(entropy || this.utils.randomHex(32), this.accountsModule));\n          }\n          return this;\n        }\n      }, {\n        key: \"get\",\n        value: function get(account) {\n          return this.accounts[account];\n        }\n      }, {\n        key: \"add\",\n        value: function add(account) {\n          if (isString(account)) {\n            account = Account.fromPrivateKey(account, this.accountsModule);\n          }\n          if (!this.accounts[account.address]) {\n            this.accounts[this.accountsIndex] = account;\n            this.accounts[account.address] = account;\n            this.accounts[account.address.toLowerCase()] = account;\n            this.accountsIndex++;\n            return account;\n          }\n          return this.accounts[account.address];\n        }\n      }, {\n        key: \"remove\",\n        value: function remove(addressOrIndex) {\n          var account = this.accounts[addressOrIndex];\n          if (account) {\n            delete this.accounts[account.address];\n            delete this.accounts[account.address.toLowerCase()];\n            delete this.accounts[account.index];\n            return true;\n          }\n          return false;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          for (var i = 0; i <= this.accountsIndex; i++) {\n            this.remove(i);\n          }\n          this.accountsIndex = 0;\n          return this;\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(password, options) {\n          var encryptedAccounts = [];\n          for (var i = 0; i < this.accountsIndex; i++) {\n            encryptedAccounts.push(this.accounts[i].encrypt(password, options));\n          }\n          return encryptedAccounts;\n        }\n      }, {\n        key: \"decrypt\",\n        value: function decrypt(encryptedWallet, password) {\n          var _this = this;\n          encryptedWallet.forEach(function (keystore) {\n            var account = Account.fromV3Keystore(keystore, password, false, _this.accountsModule);\n            if (!account) {\n              throw new Error(\"Couldn't decrypt accounts. Password wrong?\");\n            }\n            _this.add(account);\n          });\n          return this;\n        }\n      }, {\n        key: \"save\",\n        value: function save(password, keyName) {\n          console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');\n          if (typeof localStorage === 'undefined') {\n            throw new TypeError('window.localStorage is undefined.');\n          }\n          try {\n            localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n          } catch (error) {\n            if (error.code === 18) {\n              return true;\n            }\n            throw new Error(error);\n          }\n          return true;\n        }\n      }, {\n        key: \"load\",\n        value: function load(password, keyName) {\n          console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');\n          if (typeof localStorage === 'undefined') {\n            throw new TypeError('window.localStorage is undefined.');\n          }\n          var keystore;\n          try {\n            keystore = localStorage.getItem(keyName || this.defaultKeyName);\n            if (keystore) {\n              keystore = JSON.parse(keystore);\n            }\n          } catch (error) {\n            if (error.code === 18) {\n              keystore = this.defaultKeyName;\n            } else {\n              throw new Error(error);\n            }\n          }\n          return this.decrypt(keystore || [], password);\n        }\n      }]);\n      return Wallet;\n    }();\n\n    var Accounts =\n    function (_AbstractWeb3Module) {\n      _inherits(Accounts, _AbstractWeb3Module);\n      function Accounts(provider, utils, formatters, methodFactory, options, net) {\n        var _this;\n        _classCallCheck(this, Accounts);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Accounts).call(this, provider, options, methodFactory, net));\n        _this.utils = utils;\n        _this.formatters = formatters;\n        _this._transactionSigner = options.transactionSigner;\n        _this.defaultKeyName = 'web3js_wallet';\n        _this.accounts = {};\n        _this.accountsIndex = 0;\n        _this.wallet = new Wallet(utils, _assertThisInitialized(_this));\n        return _this;\n      }\n      _createClass(Accounts, [{\n        key: \"create\",\n        value: function create(entropy) {\n          return Account.from(entropy, this);\n        }\n      }, {\n        key: \"privateKeyToAccount\",\n        value: function privateKeyToAccount(privateKey) {\n          return Account.fromPrivateKey(privateKey, this);\n        }\n      }, {\n        key: \"hashMessage\",\n        value: function hashMessage(data) {\n          if (this.utils.isHexStrict(data)) {\n            data = this.utils.hexToBytes(data);\n          }\n          var messageBuffer = Buffer.from(data);\n          var preambleBuffer = Buffer.from(\"\\x19Ethereum Signed Message:\\n\".concat(data.length));\n          var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n          return Hash.keccak256s(ethMessage);\n        }\n      }, {\n        key: \"signTransaction\",\n        value: function () {\n          var _signTransaction = _asyncToGenerator(\n          _regeneratorRuntime.mark(function _callee(tx, privateKey, callback) {\n            var account, signedTransaction;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    account = Account.fromPrivateKey(privateKey, this);\n                    if (tx.chainId) {\n                      _context.next = 6;\n                      break;\n                    }\n                    _context.next = 5;\n                    return this.getChainId();\n                  case 5:\n                    tx.chainId = _context.sent;\n                  case 6:\n                    if (tx.gasPrice) {\n                      _context.next = 10;\n                      break;\n                    }\n                    _context.next = 9;\n                    return this.getGasPrice();\n                  case 9:\n                    tx.gasPrice = _context.sent;\n                  case 10:\n                    if (!(!tx.nonce && tx.nonce !== 0)) {\n                      _context.next = 14;\n                      break;\n                    }\n                    _context.next = 13;\n                    return this.getTransactionCount(account.address);\n                  case 13:\n                    tx.nonce = _context.sent;\n                  case 14:\n                    _context.next = 16;\n                    return this.transactionSigner.sign(this.formatters.inputCallFormatter(tx, this), account.privateKey);\n                  case 16:\n                    signedTransaction = _context.sent;\n                    if (isFunction(callback)) {\n                      callback(false, signedTransaction);\n                    }\n                    return _context.abrupt(\"return\", signedTransaction);\n                  case 21:\n                    _context.prev = 21;\n                    _context.t0 = _context[\"catch\"](0);\n                    if (!isFunction(callback)) {\n                      _context.next = 26;\n                      break;\n                    }\n                    callback(_context.t0, null);\n                    return _context.abrupt(\"return\");\n                  case 26:\n                    throw _context.t0;\n                  case 27:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this, [[0, 21]]);\n          }));\n          function signTransaction(_x, _x2, _x3) {\n            return _signTransaction.apply(this, arguments);\n          }\n          return signTransaction;\n        }()\n      }, {\n        key: \"recoverTransaction\",\n        value: function recoverTransaction(rawTx) {\n          var values = RLP.decode(rawTx);\n          var signature = EthLibAccount.encodeSignature(values.slice(6, 9));\n          var recovery = Bytes.toNumber(values[6]);\n          var extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), '0x', '0x'];\n          var signingData = values.slice(0, 6).concat(extraData);\n          var signingDataHex = RLP.encode(signingData);\n          return EthLibAccount.recover(Hash.keccak256(signingDataHex), signature);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(data, privateKey) {\n          if (this.utils.isHexStrict(data)) {\n            data = this.utils.hexToBytes(data);\n          }\n          return Account.fromPrivateKey(privateKey, this).sign(data);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(message, signature, preFixed) {\n          if (isObject(message)) {\n            return this.recover(message.messageHash, EthLibAccount.encodeSignature([message.v, message.r, message.s]), true);\n          }\n          if (!preFixed) {\n            message = this.hashMessage(message);\n          }\n          if (arguments.length >= 4) {\n            return this.recover(arguments[0], EthLibAccount.encodeSignature([arguments[1], arguments[2], arguments[3]]), !!arguments[4]);\n          }\n          return EthLibAccount.recover(message, signature);\n        }\n      }, {\n        key: \"decrypt\",\n        value: function decrypt(v3Keystore, password, nonStrict) {\n          return Account.fromV3Keystore(v3Keystore, password, nonStrict, this);\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(privateKey, password, options) {\n          return Account.fromPrivateKey(privateKey, this).toV3Keystore(password, options);\n        }\n      }, {\n        key: \"transactionSigner\",\n        get: function get() {\n          return this._transactionSigner;\n        }\n        ,\n        set: function set(transactionSigner) {\n          if (transactionSigner.type && transactionSigner.type === 'TransactionSigner') {\n            throw new Error('Invalid TransactionSigner given!');\n          }\n          this._transactionSigner = transactionSigner;\n        }\n      }]);\n      return Accounts;\n    }(web3Core.AbstractWeb3Module);\n\n    function Accounts$1(provider) {\n      var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Accounts(provider, Utils, web3CoreHelpers.formatters, new MethodFactory(Utils, web3CoreHelpers.formatters), options, net);\n    }\n\n    exports.Accounts = Accounts$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":1,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":2,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":3,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":5,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":6,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":8,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":9,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":10,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":11,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":12,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":13,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":14,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":15,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":16,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":17,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":18,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":19,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":20,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":21,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":22,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":23,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":24,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":25,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":26,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":27,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":28,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":29,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":30,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":31,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":32,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":33,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":34,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":35,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":36,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":37,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":38,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":39,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":40,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":41,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":42,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":43,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":44,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":45,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":46,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":47,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":48,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":49,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":50,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":51,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":52,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":53,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":54,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":55,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":56,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":57,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":58,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":59,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":60,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":61,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":62,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":63,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":64,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":65,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":66,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":67,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":68,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":69,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":70,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":71,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":72,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":73,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":74,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":75,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":76,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":77,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":78,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":79,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":80,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":81,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":82,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":83,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":84,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":85,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":86,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":87,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":88,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":89,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":90,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":91,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":92,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":93,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":94,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":95,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":96,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":97,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":98,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":99,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":100,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":101,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":102,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":103,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":104,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":105,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":106,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":107,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":108,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":109,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":110,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":111,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":112,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":113,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":114,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":115,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":116,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":117,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":118,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":119,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":120,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":121,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":122,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":123,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":124,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":125,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":126,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":127,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":128,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":129,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":130,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":131,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":132,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":133,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":134,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":135,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":136,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":137,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":138,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":139,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":140,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":141,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":142,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":143,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":144,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":145,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":146,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":147,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":148,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":149,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":150,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":151,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":152,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":153,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":154,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":155,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":156,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":157,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":158,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":159,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":160,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":161,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":162,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":163,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":164,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":165,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":166,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":167,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":168,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":169,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":170,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":171,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":172,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":173,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":174,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":175,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":176,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":177,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":178,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":179,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":180,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":181,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":182,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":183,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":184,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":185,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":186,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":187,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":188,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":189,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":190,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":191,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":192,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":193,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":194,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":195,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":196,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":197,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":198,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":199,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":200,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":201,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":202,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":203,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":204,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":205,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":206,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":207,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":208,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":209,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":210,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":211,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":212,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":213,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":214,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":215,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":216,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":217,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":218,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":219,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":220,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":221,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":222,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":223,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":224,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":225,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":226,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":227,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":228,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":229,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":230,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":231,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":232,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":233,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":234,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":235,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":236,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":237,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":238,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":239,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":240,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":241,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":242,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":243,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":244,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":245,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":246,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":247,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":248,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":249,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":250,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":251,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":252,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":253,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":254,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":255,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":256,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":257,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":258,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":259,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":260,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":261,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":262,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":263,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":264,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":265,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":266,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":267,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":268,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":269,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":270,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":271,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":272,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":273,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":274,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":275,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":276,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":277,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":278,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":279,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":280,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":281,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":282,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":283,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":284,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":285,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":286,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":287,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":288,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":289,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":290,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":291,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":292,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":293,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":294,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":295,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":296,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":297,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":298,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":299,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":300,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":301,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":302,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":303,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":304,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":305,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":306,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":307,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":308,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":309,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":310,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":311,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":312,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":313,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":314,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":315,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":316,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":317,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":318,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":319,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":320,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":321,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":322,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":323,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":324,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":325,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":326,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":327,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":328,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":329,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":330,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":331,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":332,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":333,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":334,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":335,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":336,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":337,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":338,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":339,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":340,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":341,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":342,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":343,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":344,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":345,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":346,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":347,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":348,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":349,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":350,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":351,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":352,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":353,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":354,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":355,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":356,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":357,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":358,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":359,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":360,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":361,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":362,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":363,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":364,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":365,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":366,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":367,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":368,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":369,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":370,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":371,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":372,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":373,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":374,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":375,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":376,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":377,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":378,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":379,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":380,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":381,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":382,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":383,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":384,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":385,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":386,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":387,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":388,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":389,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":390,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":391,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":392,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":393,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":394,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":395,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":396,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":397,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":398,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":399,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":400,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":401,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":402,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":403,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":404,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":405,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":406,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":407,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":408,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":409,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":410,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":411,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":412,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":413,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":414,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":415,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":416,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":417,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":418,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":419,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":420,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":421,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":422,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":423,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":424,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":425,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":426,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":427,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":428,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":429,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":430,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":431,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":432,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":433,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":434,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":435,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":436,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":437,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":438,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":439,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":440,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":441,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":442,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":443,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":444,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":445,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":446,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":447,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":448,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":449,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":450,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":451,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":452,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":453,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":454,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":455,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":456,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":457,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":458,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":459,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":460,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":461,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":462,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":463,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":464,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":465,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":466,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":467,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":468,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":469,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":470,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":471,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":472,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":473,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":474,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":475,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":476,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":477,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":478,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":479,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":480,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":481,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":482,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":483,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":484,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":485,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":486,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":487,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":488,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":489,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":490,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":491,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":492,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":493,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js","original":{"line":494,"column":0},"generated":{"line":497,"column":0}}],"sources":{"../node_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('web3-utils'), require('web3-core-helpers'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('web3-core-method'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('@babel/runtime/helpers/createClass'), require('@babel/runtime/helpers/assertThisInitialized'), require('lodash/isFunction'), require('lodash/isObject'), require('eth-lib/lib/hash'), require('eth-lib/lib/rlp'), require('eth-lib/lib/bytes'), require('eth-lib/lib/account'), require('web3-core'), require('scrypt.js'), require('lodash/isString'), require('uuid'), require('randombytes'), require('pbkdf2'), require('browserify-cipher')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'web3-utils', 'web3-core-helpers', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'web3-core-method', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', '@babel/runtime/helpers/createClass', '@babel/runtime/helpers/assertThisInitialized', 'lodash/isFunction', 'lodash/isObject', 'eth-lib/lib/hash', 'eth-lib/lib/rlp', 'eth-lib/lib/bytes', 'eth-lib/lib/account', 'web3-core', 'scrypt.js', 'lodash/isString', 'uuid', 'randombytes', 'pbkdf2', 'browserify-cipher'], factory) :\n    (global = global || self, factory(global.Web3EthAccounts = {}, global.Utils, global.web3CoreHelpers, global._classCallCheck, global._possibleConstructorReturn, global._getPrototypeOf, global._inherits, global.web3CoreMethod, global._regeneratorRuntime, global._asyncToGenerator, global._createClass, global._assertThisInitialized, global.isFunction, global.isObject, global.Hash, global.RLP, global.Bytes, global.EthLibAccount, global.web3Core, global.scryptsy, global.isString, global.uuid, global.randomBytes, global.pbkdf2, global.browserifyCipher));\n}(this, function (exports, Utils, web3CoreHelpers, _classCallCheck, _possibleConstructorReturn, _getPrototypeOf, _inherits, web3CoreMethod, _regeneratorRuntime, _asyncToGenerator, _createClass, _assertThisInitialized, isFunction, isObject, Hash, RLP, Bytes, EthLibAccount, web3Core, scryptsy, isString, uuid, randomBytes, pbkdf2, browserifyCipher) { 'use strict';\n\n    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;\n    _possibleConstructorReturn = _possibleConstructorReturn && _possibleConstructorReturn.hasOwnProperty('default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;\n    _getPrototypeOf = _getPrototypeOf && _getPrototypeOf.hasOwnProperty('default') ? _getPrototypeOf['default'] : _getPrototypeOf;\n    _inherits = _inherits && _inherits.hasOwnProperty('default') ? _inherits['default'] : _inherits;\n    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;\n    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;\n    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;\n    _assertThisInitialized = _assertThisInitialized && _assertThisInitialized.hasOwnProperty('default') ? _assertThisInitialized['default'] : _assertThisInitialized;\n    isFunction = isFunction && isFunction.hasOwnProperty('default') ? isFunction['default'] : isFunction;\n    isObject = isObject && isObject.hasOwnProperty('default') ? isObject['default'] : isObject;\n    Hash = Hash && Hash.hasOwnProperty('default') ? Hash['default'] : Hash;\n    RLP = RLP && RLP.hasOwnProperty('default') ? RLP['default'] : RLP;\n    Bytes = Bytes && Bytes.hasOwnProperty('default') ? Bytes['default'] : Bytes;\n    scryptsy = scryptsy && scryptsy.hasOwnProperty('default') ? scryptsy['default'] : scryptsy;\n    isString = isString && isString.hasOwnProperty('default') ? isString['default'] : isString;\n    uuid = uuid && uuid.hasOwnProperty('default') ? uuid['default'] : uuid;\n    randomBytes = randomBytes && randomBytes.hasOwnProperty('default') ? randomBytes['default'] : randomBytes;\n\n    var MethodFactory =\n    function (_AbstractMethodFactor) {\n      _inherits(MethodFactory, _AbstractMethodFactor);\n      function MethodFactory(utils, formatters) {\n        var _this;\n        _classCallCheck(this, MethodFactory);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(MethodFactory).call(this, utils, formatters));\n        _this.methods = {\n          getChainId: web3CoreMethod.ChainIdMethod,\n          getGasPrice: web3CoreMethod.GetGasPriceMethod,\n          getTransactionCount: web3CoreMethod.GetTransactionCountMethod\n        };\n        return _this;\n      }\n      return MethodFactory;\n    }(web3CoreMethod.AbstractMethodFactory);\n\n    var Account =\n    function () {\n      function Account(options) {\n        var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, Account);\n        this.address = options.address;\n        this.privateKey = options.privateKey;\n        this.accounts = accounts;\n      }\n      _createClass(Account, [{\n        key: \"signTransaction\",\n        value: function signTransaction(tx, callback) {\n          return this.accounts.signTransaction(tx, this.privateKey, callback);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(data) {\n          if (Utils.isHexStrict(data)) {\n            data = Utils.hexToBytes(data);\n          }\n          var messageBuffer = Buffer.from(data);\n          var preamble = \"\\x19Ethereum Signed Message:\\n\".concat(data.length);\n          var preambleBuffer = Buffer.from(preamble);\n          var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n          var hash = Hash.keccak256s(ethMessage);\n          var signature = EthLibAccount.sign(hash, this.privateKey);\n          var vrs = EthLibAccount.decodeSignature(signature);\n          return {\n            message: data,\n            messageHash: hash,\n            v: vrs[0],\n            r: vrs[1],\n            s: vrs[2],\n            signature: signature\n          };\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(password, options) {\n          return Account.fromPrivateKey(this.privateKey, this.accounts).toV3Keystore(password, options);\n        }\n      }, {\n        key: \"toV3Keystore\",\n        value: function toV3Keystore(password, options) {\n          options = options || {};\n          var salt = options.salt || randomBytes(32);\n          var iv = options.iv || randomBytes(16);\n          var derivedKey;\n          var kdf = options.kdf || 'scrypt';\n          var kdfparams = {\n            dklen: options.dklen || 32,\n            salt: salt.toString('hex')\n          };\n          if (kdf === 'pbkdf2') {\n            kdfparams.c = options.c || 262144;\n            kdfparams.prf = 'hmac-sha256';\n            derivedKey = pbkdf2.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n          } else if (kdf === 'scrypt') {\n            kdfparams.n = options.n || 8192;\n            kdfparams.r = options.r || 8;\n            kdfparams.p = options.p || 1;\n            derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n          } else {\n            throw new Error('Unsupported kdf');\n          }\n          var cipher = browserifyCipher.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n          if (!cipher) {\n            throw new Error('Unsupported cipher');\n          }\n          var ciphertext = Buffer.concat([cipher.update(Buffer.from(this.privateKey.replace('0x', ''), 'hex')), cipher.final()]);\n          var mac = Utils.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')])).replace('0x', '');\n          return {\n            version: 3,\n            id: uuid.v4({\n              random: options.uuid || randomBytes(16)\n            }),\n            address: this.address.toLowerCase().replace('0x', ''),\n            crypto: {\n              ciphertext: ciphertext.toString('hex'),\n              cipherparams: {\n                iv: iv.toString('hex')\n              },\n              cipher: options.cipher || 'aes-128-ctr',\n              kdf: kdf,\n              kdfparams: kdfparams,\n              mac: mac.toString('hex')\n            }\n          };\n        }\n      }], [{\n        key: \"from\",\n        value: function from(entropy) {\n          var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return new Account(EthLibAccount.create(entropy || Utils.randomHex(32)), accounts);\n        }\n      }, {\n        key: \"fromPrivateKey\",\n        value: function fromPrivateKey(privateKey) {\n          var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return new Account(EthLibAccount.fromPrivate(privateKey), accounts);\n        }\n      }, {\n        key: \"fromV3Keystore\",\n        value: function fromV3Keystore(v3Keystore, password) {\n          var nonStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var accounts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n          if (!isString(password)) {\n            throw new Error('No password given.');\n          }\n          var json = isObject(v3Keystore) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n          if (json.version !== 3) {\n            throw new Error('Not a valid V3 wallet');\n          }\n          var derivedKey;\n          var kdfparams;\n          if (json.crypto.kdf === 'scrypt') {\n            kdfparams = json.crypto.kdfparams;\n            derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n          } else if (json.crypto.kdf === 'pbkdf2') {\n            kdfparams = json.crypto.kdfparams;\n            if (kdfparams.prf !== 'hmac-sha256') {\n              throw new Error('Unsupported parameters to PBKDF2');\n            }\n            derivedKey = pbkdf2.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n          } else {\n            throw new Error('Unsupported key derivation scheme');\n          }\n          var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n          var mac = Utils.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');\n          if (mac !== json.crypto.mac) {\n            throw new Error('Key derivation failed - possibly wrong password');\n          }\n          var decipher = browserifyCipher.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n          var seed = \"0x\".concat(Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString('hex'));\n          return Account.fromPrivateKey(seed, accounts);\n        }\n      }]);\n      return Account;\n    }();\n\n    var Wallet =\n    function () {\n      function Wallet(utils, accountsModule) {\n        _classCallCheck(this, Wallet);\n        this.utils = utils;\n        this.accountsModule = accountsModule;\n        this.defaultKeyName = 'web3js_wallet';\n        this.accounts = {};\n        this.accountsIndex = 0;\n        return new Proxy(this, {\n          get: function get(target, name) {\n            if (target.accounts[name]) {\n              return target.accounts[name];\n            }\n            if (name === 'length') {\n              return target.accountsIndex;\n            }\n            return target[name];\n          }\n        });\n      }\n      _createClass(Wallet, [{\n        key: \"create\",\n        value: function create(numberOfAccounts, entropy) {\n          for (var i = 0; i < numberOfAccounts; ++i) {\n            this.add(Account.from(entropy || this.utils.randomHex(32), this.accountsModule));\n          }\n          return this;\n        }\n      }, {\n        key: \"get\",\n        value: function get(account) {\n          return this.accounts[account];\n        }\n      }, {\n        key: \"add\",\n        value: function add(account) {\n          if (isString(account)) {\n            account = Account.fromPrivateKey(account, this.accountsModule);\n          }\n          if (!this.accounts[account.address]) {\n            this.accounts[this.accountsIndex] = account;\n            this.accounts[account.address] = account;\n            this.accounts[account.address.toLowerCase()] = account;\n            this.accountsIndex++;\n            return account;\n          }\n          return this.accounts[account.address];\n        }\n      }, {\n        key: \"remove\",\n        value: function remove(addressOrIndex) {\n          var account = this.accounts[addressOrIndex];\n          if (account) {\n            delete this.accounts[account.address];\n            delete this.accounts[account.address.toLowerCase()];\n            delete this.accounts[account.index];\n            return true;\n          }\n          return false;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          for (var i = 0; i <= this.accountsIndex; i++) {\n            this.remove(i);\n          }\n          this.accountsIndex = 0;\n          return this;\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(password, options) {\n          var encryptedAccounts = [];\n          for (var i = 0; i < this.accountsIndex; i++) {\n            encryptedAccounts.push(this.accounts[i].encrypt(password, options));\n          }\n          return encryptedAccounts;\n        }\n      }, {\n        key: \"decrypt\",\n        value: function decrypt(encryptedWallet, password) {\n          var _this = this;\n          encryptedWallet.forEach(function (keystore) {\n            var account = Account.fromV3Keystore(keystore, password, false, _this.accountsModule);\n            if (!account) {\n              throw new Error(\"Couldn't decrypt accounts. Password wrong?\");\n            }\n            _this.add(account);\n          });\n          return this;\n        }\n      }, {\n        key: \"save\",\n        value: function save(password, keyName) {\n          console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');\n          if (typeof localStorage === 'undefined') {\n            throw new TypeError('window.localStorage is undefined.');\n          }\n          try {\n            localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n          } catch (error) {\n            if (error.code === 18) {\n              return true;\n            }\n            throw new Error(error);\n          }\n          return true;\n        }\n      }, {\n        key: \"load\",\n        value: function load(password, keyName) {\n          console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');\n          if (typeof localStorage === 'undefined') {\n            throw new TypeError('window.localStorage is undefined.');\n          }\n          var keystore;\n          try {\n            keystore = localStorage.getItem(keyName || this.defaultKeyName);\n            if (keystore) {\n              keystore = JSON.parse(keystore);\n            }\n          } catch (error) {\n            if (error.code === 18) {\n              keystore = this.defaultKeyName;\n            } else {\n              throw new Error(error);\n            }\n          }\n          return this.decrypt(keystore || [], password);\n        }\n      }]);\n      return Wallet;\n    }();\n\n    var Accounts =\n    function (_AbstractWeb3Module) {\n      _inherits(Accounts, _AbstractWeb3Module);\n      function Accounts(provider, utils, formatters, methodFactory, options, net) {\n        var _this;\n        _classCallCheck(this, Accounts);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Accounts).call(this, provider, options, methodFactory, net));\n        _this.utils = utils;\n        _this.formatters = formatters;\n        _this._transactionSigner = options.transactionSigner;\n        _this.defaultKeyName = 'web3js_wallet';\n        _this.accounts = {};\n        _this.accountsIndex = 0;\n        _this.wallet = new Wallet(utils, _assertThisInitialized(_this));\n        return _this;\n      }\n      _createClass(Accounts, [{\n        key: \"create\",\n        value: function create(entropy) {\n          return Account.from(entropy, this);\n        }\n      }, {\n        key: \"privateKeyToAccount\",\n        value: function privateKeyToAccount(privateKey) {\n          return Account.fromPrivateKey(privateKey, this);\n        }\n      }, {\n        key: \"hashMessage\",\n        value: function hashMessage(data) {\n          if (this.utils.isHexStrict(data)) {\n            data = this.utils.hexToBytes(data);\n          }\n          var messageBuffer = Buffer.from(data);\n          var preambleBuffer = Buffer.from(\"\\x19Ethereum Signed Message:\\n\".concat(data.length));\n          var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);\n          return Hash.keccak256s(ethMessage);\n        }\n      }, {\n        key: \"signTransaction\",\n        value: function () {\n          var _signTransaction = _asyncToGenerator(\n          _regeneratorRuntime.mark(function _callee(tx, privateKey, callback) {\n            var account, signedTransaction;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    account = Account.fromPrivateKey(privateKey, this);\n                    if (tx.chainId) {\n                      _context.next = 6;\n                      break;\n                    }\n                    _context.next = 5;\n                    return this.getChainId();\n                  case 5:\n                    tx.chainId = _context.sent;\n                  case 6:\n                    if (tx.gasPrice) {\n                      _context.next = 10;\n                      break;\n                    }\n                    _context.next = 9;\n                    return this.getGasPrice();\n                  case 9:\n                    tx.gasPrice = _context.sent;\n                  case 10:\n                    if (!(!tx.nonce && tx.nonce !== 0)) {\n                      _context.next = 14;\n                      break;\n                    }\n                    _context.next = 13;\n                    return this.getTransactionCount(account.address);\n                  case 13:\n                    tx.nonce = _context.sent;\n                  case 14:\n                    _context.next = 16;\n                    return this.transactionSigner.sign(this.formatters.inputCallFormatter(tx, this), account.privateKey);\n                  case 16:\n                    signedTransaction = _context.sent;\n                    if (isFunction(callback)) {\n                      callback(false, signedTransaction);\n                    }\n                    return _context.abrupt(\"return\", signedTransaction);\n                  case 21:\n                    _context.prev = 21;\n                    _context.t0 = _context[\"catch\"](0);\n                    if (!isFunction(callback)) {\n                      _context.next = 26;\n                      break;\n                    }\n                    callback(_context.t0, null);\n                    return _context.abrupt(\"return\");\n                  case 26:\n                    throw _context.t0;\n                  case 27:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this, [[0, 21]]);\n          }));\n          function signTransaction(_x, _x2, _x3) {\n            return _signTransaction.apply(this, arguments);\n          }\n          return signTransaction;\n        }()\n      }, {\n        key: \"recoverTransaction\",\n        value: function recoverTransaction(rawTx) {\n          var values = RLP.decode(rawTx);\n          var signature = EthLibAccount.encodeSignature(values.slice(6, 9));\n          var recovery = Bytes.toNumber(values[6]);\n          var extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), '0x', '0x'];\n          var signingData = values.slice(0, 6).concat(extraData);\n          var signingDataHex = RLP.encode(signingData);\n          return EthLibAccount.recover(Hash.keccak256(signingDataHex), signature);\n        }\n      }, {\n        key: \"sign\",\n        value: function sign(data, privateKey) {\n          if (this.utils.isHexStrict(data)) {\n            data = this.utils.hexToBytes(data);\n          }\n          return Account.fromPrivateKey(privateKey, this).sign(data);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(message, signature, preFixed) {\n          if (isObject(message)) {\n            return this.recover(message.messageHash, EthLibAccount.encodeSignature([message.v, message.r, message.s]), true);\n          }\n          if (!preFixed) {\n            message = this.hashMessage(message);\n          }\n          if (arguments.length >= 4) {\n            return this.recover(arguments[0], EthLibAccount.encodeSignature([arguments[1], arguments[2], arguments[3]]), !!arguments[4]);\n          }\n          return EthLibAccount.recover(message, signature);\n        }\n      }, {\n        key: \"decrypt\",\n        value: function decrypt(v3Keystore, password, nonStrict) {\n          return Account.fromV3Keystore(v3Keystore, password, nonStrict, this);\n        }\n      }, {\n        key: \"encrypt\",\n        value: function encrypt(privateKey, password, options) {\n          return Account.fromPrivateKey(privateKey, this).toV3Keystore(password, options);\n        }\n      }, {\n        key: \"transactionSigner\",\n        get: function get() {\n          return this._transactionSigner;\n        }\n        ,\n        set: function set(transactionSigner) {\n          if (transactionSigner.type && transactionSigner.type === 'TransactionSigner') {\n            throw new Error('Invalid TransactionSigner given!');\n          }\n          this._transactionSigner = transactionSigner;\n        }\n      }]);\n      return Accounts;\n    }(web3Core.AbstractWeb3Module);\n\n    function Accounts$1(provider) {\n      var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return new Accounts(provider, Utils, web3CoreHelpers.formatters, new MethodFactory(Utils, web3CoreHelpers.formatters), options, net);\n    }\n\n    exports.Accounts = Accounts$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"},"lineCount":497}},"error":null,"hash":"7b3ec917beb19af29e68ab8709d43fcb","cacheData":{"env":{}}}